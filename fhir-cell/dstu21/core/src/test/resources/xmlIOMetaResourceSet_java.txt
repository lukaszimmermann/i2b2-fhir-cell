/*
 * Copyright (c) 2006-2007 Massachusetts General Hospital 
 * All rights reserved. This program and the accompanying materials 
 * are made available under the terms of the i2b2 Software License v1.0 
 * which accompanies this distribution. 
 * 
 * Contributors:
 * 		Kavishwar Wagholikar (kavi)
 */
package edu.harvard.i2b2;

import static org.junit.Assert.assertEquals;

import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.lang.reflect.InvocationTargetException;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.GregorianCalendar;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import javax.xml.bind.JAXBContext;
import javax.xml.bind.JAXBException;
import javax.xml.bind.Marshaller;
import javax.xml.bind.Unmarshaller;
import javax.xml.datatype.DatatypeConfigurationException;
import javax.xml.datatype.DatatypeFactory;

import junit.framework.Assert;

import org.hl7.fhir.Medication;
import org.hl7.fhir.MedicationStatement;
import org.hl7.fhir.Patient;
import org.hl7.fhir.Resource;
import org.hl7.fhir.Reference;
import org.junit.Test;

import edu.harvard.i2b2.fhir.FhirUtil;
import edu.harvard.i2b2.fhir.JAXBUtil;
import edu.harvard.i2b2.fhir.ResourceDb;
import edu.harvard.i2b2.fhir.List<Resource>Transform;
import edu.harvard.i2b2.fhir.Utils;
import edu.harvard.i2b2.fhir.XQueryUtil;
import edu.harvard.i2b2.fhir.XQueryUtilException;

public class xmlIOList<Resource> {

	// @Test
	public void test2() throws JAXBException, IOException,
			DatatypeConfigurationException {
		final String BOOKSTORE_XML = "./tmp.xml";

		List<Resource> s1 = new List<Resource>();
		ArrayList<Resource> list = new ArrayList<Resource>();

		// create books
		Resource r1 = new Resource();
		MetaData md1 = new MetaData();
		//md1.setId("medication/1");
		GregorianCalendar gc = new GregorianCalendar();

		md1.setLastUpdated(DatatypeFactory.newInstance()
				.newXMLGregorianCalendar(gc));

		Medication m1 = new Medication();
		org.hl7.fhir.String str1 = new org.hl7.fhir.String();
		str1.setValue("med1");
		m1.setName(str1);

		r1.setMetaData(md1);
		r1.setResource(m1);
		list.add(r1);
		s1.getResource().add(r1);
		s1.getResource().add(r1);

		// create JAXB context and instantiate marshaller
		JAXBContext context = JAXBContext.newInstance(List<Resource>.class);
		Marshaller m = context.createMarshaller();
		m.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, Boolean.TRUE);

		// Write to System.out
		m.marshal(s1, System.out);

		// Write to File
		m.marshal(s1, new File(BOOKSTORE_XML));

		// get variables from our xml file, created before
		System.out.println();
		System.out.println("Output from our XML File: ");
		Unmarshaller um = context.createUnmarshaller();
		System.out.println("FhirResourceSet: ");
		List<Resource> s2 = (List<Resource>) um.unmarshal(new FileReader(
				BOOKSTORE_XML));
		System.out.println("FhirResourceSet: "
				+ s2.getResource().get(0).getResource().getId());

	}

	//@Test
	public void Test2() throws JAXBException, FileNotFoundException {
		final String xmlFileName = "example/fhir/List<Resource>3.xml";
		String xmlString = Utils.getFile(xmlFileName);
		
		List<Resource> s2 = List<Resource>Transform.List<Resource>FromXml(xmlString); 
		// System.out.println("FhirResourceSet: "
		// +s2.getResource().get(0).getMetaData().getId());
		System.out.println("FhirResourceSet: "
				+ ((Medication) s2.getResource().get(0).getResource())
						.getName().getValue());
		assertEquals("NDC:00641276641","FhirResourceSet: "
				+ ((Medication) s2.getResource().get(0).getResource())
						.getCode().getCoding().get(0).getCode().getValue());

	}

	
	//@Test
		public void printXqueryResult() throws JAXBException, XQueryUtilException {
			String xmlString = PdoEGtoFhirBundle.defaultread();
			System.out.println(xmlString);
		}
	//@Test
	public void testI2b2toFhirMedPDOtransform() throws JAXBException, XQueryUtilException {
		String xmlString = PdoEGtoFhirBundle.defaultread();
		System.out.println(xmlString);
		List<Resource> s = List<Resource>Transform.List<Resource>FromXml(xmlString); 
		testResources(s);
	}

	private void testResources(List<Resource> s2) throws JAXBException{
		// System.out.println(Utils.getFile(xmlFileName));
				
				// System.out.println("FhirResourceSet: "
				// +s2.getResource().get(0).getMetaData().getId());
				Resource r1 = s2.getResource().get(1).getResource();
				if (Medication.class.isInstance(r1)) {

					System.out.println("FhirResourceSet: "
							+ ((Medication) r1).getCode().getCoding().get(0).getCode()
									.getValue());
					System.out.println("FhirResourceSet: "
							+ ((Medication) r1).getText().getStatus().getValue());
				} else {
					System.out.println("FhirResourceSet: "
							+ ((MedicationStatement) r1).getId());
					System.out.println("FhirResourceSet: "
							+ ((MedicationStatement) r1).getText().getDiv()
									.getContent().get(0).toString());
				}

				for (Resource mr : s2.getResource()) {
					Resource r = mr.getResource();
					if (FhirUtil.isValid(JAXBUtil.toXml(r))) {
						System.out.println("#################Valid");
					} else {
						throw new RuntimeException(
								FhirUtil.getValidatorErrorMessage(JAXBUtil.toXml(r)));
					}

				}
		
	}
	
	 @Test
	public void Test4() throws JAXBException, XQueryUtilException {
		String str = "fn:replace('2009-09-10T00:00:00.000Z','.000Z$','')";
		System.out.println(XQueryUtil.processXQuery(str,""));
		assertEquals("2009-09-10T00:00:00", XQueryUtil.processXQuery(str,""));
	}
	
	//@Test
	public void Test5() throws NoSuchMethodException, SecurityException, IllegalAccessException, IllegalArgumentException, InvocationTargetException, IOException, JAXBException{
		ResourceDb mrDb= new ResourceDb();
		Patient p= new Patient();
		FhirUtil.setId(p,"Patient/123");
		Resource mrP=new Resource();mrP.setResource(p);
		MetaData md1=new MetaData();mrP.setMetaData(md1);
		
		
		MedicationStatement ms=new MedicationStatement();
		FhirUtil.setId(ms,"MedicationStatement/234");
		ms.setPatient(	FhirUtil.getReference(p));
		
		
		Resource mrMS=new Resource();mrMS.setResource(ms);
		MetaData md2=new MetaData();mrMS.setMetaData(md2);
		
		mrDb.addResource(mrMS,MedicationStatement.class);
		mrDb.addResource(mrP,Patient.class);
		
		System.out.println("child:"+mrDb.getChildOfResource(ms, "patient.id"));
		
	}
	
	/*
	 * validation needs to occur before translation to java object;
	 * Error in xml is lost after transformation of xml to java object
	 * as demonstrated here
	 */
	//@Test
//	public void Test6() throws DatatypeConfigurationException, JAXBException, IOException{ 
		String inValidPatient=Utils.getFile("example/fhir/singlePatientInvalid.xml");
		//System.out.println(FhirUtil.getValidatorErrorMessage(inValidPatient));
		Patient p=(Patient) JAXBUtil.fromXml(inValidPatient,Patient.class);
		Resource mr= new Resource();
		MetaData md= new MetaData();
		GregorianCalendar gc = new GregorianCalendar();
	//	md.setLastUpdated(DatatypeFactory.newInstance()
				.newXMLGregorianCalendar(gc));
		mr.setMetaData(md);
		mr.setResource(p);
		
		List<Resource> s= new List<Resource>();
		List<Resource> list=s.getResource();
		list.add(mr);
		ResourceDb db=new ResourceDb();
		
		db.addList<Resource>(s);
		System.out.println("---------\nERROR:"+FhirUtil.getValidatorErrorMessage(JAXBUtil.toXml(p)));
		
	}
	
	//@Test
	public void Test7(){ 
	String input="subject:Patient=123";
		String id=null;
		Pattern p = Pattern.compile("[P|p]atient=([a-zA-Z0-9]+)");
		Matcher m = p.matcher(input);

		if (m.find()) {
			id=m.group(1);
		    System.out.println(id);
		}
	}
	
	@Test
	public void getPatientIdFromResource() throws DatatypeConfigurationException{
		List<Resource> s=ResourceSetup.getPatientAndMedicationStatementEg();
		Resource medmr=s.getResource().get(1);
		assertEquals( "1000000005",FhirUtil.getPatientId(medmr));
		Resource ptmr=s.getResource().get(0);
		assertEquals( "1000000005",FhirUtil.getPatientId(ptmr));
	
	}
	
}

