//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.8-b130911.1802 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.12.30 at 02:43:29 AM EST 
//


package org.hl7.fhir;

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for ModuleMetadataContributorType-list.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;simpleType name="ModuleMetadataContributorType-list">
 *   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}string">
 *     &lt;enumeration value="author"/>
 *     &lt;enumeration value="editor"/>
 *     &lt;enumeration value="reviewer"/>
 *     &lt;enumeration value="endorser"/>
 *   &lt;/restriction>
 * &lt;/simpleType>
 * </pre>
 * 
 */
@XmlType(name = "ModuleMetadataContributorType-list")
@XmlEnum
public enum ModuleMetadataContributorTypeList {


    /**
     * An author of the content of the module
     * 
     */
    @XmlEnumValue("author")
    AUTHOR("author"),

    /**
     * An editor of the content of the module
     * 
     */
    @XmlEnumValue("editor")
    EDITOR("editor"),

    /**
     * A reviewer of the content of the module
     * 
     */
    @XmlEnumValue("reviewer")
    REVIEWER("reviewer"),

    /**
     * An endorser of the content of the module
     * 
     */
    @XmlEnumValue("endorser")
    ENDORSER("endorser");
    private final java.lang.String value;

    ModuleMetadataContributorTypeList(java.lang.String v) {
        value = v;
    }

    public java.lang.String value() {
        return value;
    }

    public static ModuleMetadataContributorTypeList fromValue(java.lang.String v) {
        for (ModuleMetadataContributorTypeList c: ModuleMetadataContributorTypeList.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}
